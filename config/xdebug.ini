; This switch controls whether Xdebug should try to contact a debug client
; which is listening on the host and port as set with the settings xdebug.remote_host and xdebug.remote_port.
; If a connection can not be established the script will just continue as if this setting was 0.
xdebug.remote_enable=1

; The port to which Xdebug tries to connect on the remote host.
; Port 9000 is the default for both Xdebug and the Command Line Debug Client.
; As many clients use this port number, it is best to leave this setting unchanged.
xdebug.remote_port=9000

; Normally you need to use a specific HTTP GET/POST variable to start remote debugging (see Step Debugging).
; When this setting is set to 1, Xdebug will always attempt to start a remote debugging session
; and try to connect to a client, even if the GET/POST/COOKIE variable was not present.
xdebug.remote_autostart=1

; If enabled, the xdebug.remote_host setting is ignored and
; Xdebug will try to connect to the client that made the HTTP request.
; It checks the $_SERVER['HTTP_X_FORWARDED_FOR'] and $_SERVER['REMOTE_ADDR']
; variables to find out which IP address to use.
xdebug.remote_connect_back=0

; Controls which IDE Key Xdebug should pass on to the DBGp debugger handler.
; The default is based on environment settings.
; First the environment setting DBGP_IDEKEY is consulted, then USER and as last USERNAME.
xdebug.idekey=docker

; Selects the host where the debug client is running, you can either use a host name, IP address,
; or 'unix:///path/to/sock' for a Unix domain socket.
xdebug.remote_host=host.docker.internal

; Controls the protection mechanism for infinite recursion protection.
; The value of this setting is the maximum level of nested functions that are allowed before the script will be aborted.
xdebug.max_nesting_level=512
